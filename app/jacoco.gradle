/*
 * WiFiAnalyzer
 * Copyright (C) 2015 - 2024 VREM Software Development <VREMSoftwareDevelopment@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

apply plugin: "jacoco"

jacoco {
    toolVersion = "0.8.11"
}

def executionPath = 'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec'

def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/databinding/*.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',
        '**/com/jjoe64/*',
        '**/com/vrem/wifianalyzer/settings/SharedPreferences*'
]

def classJavaDir = "$project.buildDir/intermediates/javac/debug/classes"
def classKotlinDir = "$project.buildDir/tmp/kotlin-classes/debug"
def mainJavaSrc = "$project.projectDir/src/main/java"
def mainKotlinSrc = "$project.projectDir/src/main/kotlin"
def debugTree = fileTree(dir: classJavaDir, excludes: fileFilter) + fileTree(dir: classKotlinDir, excludes: fileFilter)

tasks.withType(Test).configureEach {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        csv.required = false
        xml.required = true
        html.required = true
    }
    sourceDirectories.from = files([mainJavaSrc, mainKotlinSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [executionPath])
}

task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: 'jacocoTestReport') {
    sourceDirectories.from = files([[mainJavaSrc, mainKotlinSrc]])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [executionPath])
    violationRules {
        failOnViolation = true
        rule {
            element = 'BUNDLE'
            limit {
                counter = 'INSTRUCTION'
                minimum = 0.96
            }
            limit {
                counter = 'BRANCH'
                minimum = 0.84
            }
            limit {
                counter = 'COMPLEXITY'
                minimum = 0.89
            }
            limit {
                counter = 'LINE'
                minimum = 0.97
            }
            limit {
                counter = 'METHOD'
                minimum = 0.97
            }
            limit {
                counter = 'CLASS'
                minimum = 0.99
            }
        }
        rule {
            element = 'CLASS'
            limit {
                counter = 'INSTRUCTION'
                minimum = 0.67
            }
            limit {
                counter = 'BRANCH'
                minimum = 0.50
            }
            limit {
                counter = 'COMPLEXITY'
                minimum = 0.33
            }
            limit {
                counter = 'LINE'
                minimum = 0.60
            }
            limit {
                counter = 'METHOD'
                minimum = 0.33
            }
        }
    }
}