/*
 * WiFiAnalyzer
 * Copyright (C) 2015 - 2024 VREM Software Development <VREMSoftwareDevelopment@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

apply plugin: "com.android.application"

apply from: "jacoco.gradle"
apply plugin: "kotlin-android"
apply plugin: "kotlin-allopen"

// dependencies -------------------------------------------------
dependencies {
    // Compile Build Dependencies
    implementation fileTree(include: ["*.jar"], dir: "libs")
    implementation libs.material
    implementation libs.annotation
    implementation libs.appcompat
    implementation libs.collection.ktx
    implementation libs.core.ktx
    implementation libs.core.splashscreen
    implementation libs.legacy.support.v4
    implementation libs.lifecycle.viewmodel.ktx
    implementation libs.media
    implementation libs.preference.ktx
    implementation libs.kotlin.stdlib
    implementation libs.graphview
    // Unit Test Dependencies
    testImplementation libs.junit
    testImplementation libs.junit.toolbox
    testImplementation libs.junit.junit
    testImplementation libs.mockito.core
    testImplementation libs.mockito.kotlin
    testImplementation libs.robolectric
    testImplementation libs.kotlin.test
    testImplementation libs.kotlin.test.junit
    testImplementation libs.slf4j.simple
    testImplementation libs.assertj.core
    // Android Test Dependencies
    androidTestImplementation libs.espresso.core
    androidTestImplementation libs.junit.ktx
}

android {
    namespace 'com.vrem.wifianalyzer'
    compileSdk 34

    sourceSets.each {
        it.java.srcDirs += "src/$it.name/kotlin"
    }

    defaultConfig {
        applicationId "com.vrem.wifianalyzer"
        minSdkVersion 24
        targetSdkVersion 34
        versionCode
        versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        viewBinding = true
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android.txt")
            signingConfig
        }
        debug {
            applicationIdSuffix ".BETA"
            versionNameSuffix "-BETA"
            minifyEnabled false
            shrinkResources false
            debuggable true
            enableUnitTestCoverage true
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources true
            all {
                testLogging {
                    events "passed", "skipped", "failed", "standardOut", "standardError"
                    outputs.upToDateWhen { false }
                    showStandardStreams = true
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
    }
    lint {
        disable 'GoogleAppIndexingWarning'
    }
}

allOpen {
    annotation("com.vrem.annotation.OpenClass")
}

// keystore -------------------------------------------------
if (project.hasProperty("keyAlias")) {
    def propertiesFile = file("../../keystores/androidkeystore.properties")
    Properties properties = readProperties(propertiesFile)

    System.out.println(">>> Signing Config " + properties)
    android.buildTypes.release.signingConfig.keyAlias = properties["key_alias"].toString()
    android.buildTypes.release.signingConfig.keyPassword = properties["key_password"].toString()
    android.buildTypes.release.signingConfig.storeFile = file(properties["store_filename"].toString())
    android.buildTypes.release.signingConfig.storePassword = properties["store_password"].toString()
}

// version -------------------------------------------------
updateVersion()

def updateVersion() {
    def propertiesFile = file("build.properties")
    Properties properties = readProperties(propertiesFile)

    def versionMajor = properties["version_major"].toString().toInteger()
    def versionMinor = properties["version_minor"].toString().toInteger()
    def versionPatch = properties["version_patch"].toString().toInteger()
    def versionBuild = properties["version_build"].toString().toInteger()
    def versionStore = properties["version_store"].toString().toInteger()

    if (isReleaseTask()) {
        System.out.println(">>> Building Release...")
        versionPatch++
        versionStore++
        versionBuild = 0
        properties["version_patch"] = versionPatch.toString()
        properties["version_store"] = versionStore.toString()
        properties["version_build"] = versionBuild.toString()
        writeProperties(propertiesFile, properties)
    }
    if (isTestTask()) {
        System.out.println(">>> Running Tests...")
        versionBuild++
        properties["version_build"] = versionBuild.toString()
        writeProperties(propertiesFile, properties)
    }

    def versionName = "${versionMajor}.${versionMinor}.${versionPatch}"
    def applicationId = android.defaultConfig.applicationId
    if (!isReleaseTask()) {
        versionName = versionName + ".${versionBuild}"
        applicationId = applicationId + android.buildTypes.debug.applicationIdSuffix
    }
    System.out.println(">>> " + project.parent.name + " " + versionName + " (" + versionStore + ") " + applicationId)
    android.defaultConfig.versionCode = versionStore
    android.defaultConfig.versionName = versionName
}

def isTestTask() {
    def tasks = gradle.getStartParameter().getTaskNames()
    return ":app:testDebugUnitTest" in tasks || "testDebugUnitTest" in tasks ||
            ":app:testReleaseUnitTest" in tasks || "testReleaseUnitTest" in tasks
}

def isReleaseTask() {
    def tasks = gradle.getStartParameter().getTaskNames()
    return ":app:assembleRelease" in tasks || "assembleRelease" in tasks ||
            ":app:bundleRelease" in tasks || "bundleRelease" in tasks
}

static Properties readProperties(propertiesFile) {
    if (propertiesFile.canRead()) {
        Properties properties = new Properties()
        def inputStream = new FileInputStream(propertiesFile)
        properties.load(inputStream)
        inputStream.close()
        return properties
    } else {
        def message = ">>> Could not read " + propertiesFile.name + " file!"
        System.err.println(message)
        throw new RuntimeException(message)
    }
}

def static writeProperties(propertiesFile, properties) {
    def writer = propertiesFile.newWriter()
    properties.store(writer, "Build Properties")
    writer.close()
}
