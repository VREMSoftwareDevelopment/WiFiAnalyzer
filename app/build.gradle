/*
 * WiFiAnalyzer
 * Copyright (C) 2019  VREM Software Development <VREMSoftwareDevelopment@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

apply plugin: "com.android.application"

apply from: "jacoco.gradle"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "de.mannodermaus.android-junit5"

// dependencies -------------------------------------------------
dependencies {
    // Compile Build Dependencies
    implementation fileTree(include: ["*.jar"], dir: "libs")
    implementation "com.google.android.material:material:1.1.0"
    implementation "androidx.preference:preference:1.1.0"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "androidx.annotation:annotation:1.1.0"
    implementation "androidx.collection:collection:1.1.0"
    implementation "androidx.core:core-ktx:1.2.0"
    implementation "androidx.media:media:1.1.0"
    implementation "org.apache.commons:commons-lang3:3.9"
    implementation "org.apache.commons:commons-collections4:4.4"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.jjoe64:graphview:4.2.2"
    // Unit Test Dependencies
    testImplementation "junit:junit:4.13"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.0"
    testImplementation "org.powermock:powermock-module-junit4:2.0.5"
    testImplementation "org.powermock:powermock-api-mockito2:2.0.5"
    testImplementation "com.googlecode.junit-toolbox:junit-toolbox:2.4"
    testImplementation "org.robolectric:robolectric:4.3.1"
    testImplementation "androidx.test.ext:junit:1.1.1"
    testImplementation "io.kotlintest:kotlintest-runner-junit5:$kotest_version"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.0"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.6.0"

    // Android Test Dependencies
    androidTestImplementation "androidx.test.espresso:espresso-core:3.2.0"
    androidTestImplementation "androidx.test.ext:junit:1.1.1"
    androidTestImplementation "androidx.test:rules:1.2.0"
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    sourceSets.each {
        it.java.srcDirs += "src/$it.name/kotlin"
    }

    defaultConfig {
        applicationId "com.vrem.wifianalyzer"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode
        versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    viewBinding {
        enabled = true
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android.txt")
            signingConfig
        }
        debug {
            applicationIdSuffix ".BETA"
            versionNameSuffix "-BETA"
            minifyEnabled false
            shrinkResources false
            debuggable true
            testCoverageEnabled true
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources true
            all {
                useJUnitPlatform()
                testLogging {
                    events "passed", "skipped", "failed", "standardOut", "standardError"
                    outputs.upToDateWhen { false }
                    showStandardStreams = true
                }
            }
        }
    }

    lintOptions {
        disable "GoogleAppIndexingWarning"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

// keystore -------------------------------------------------
if (project.hasProperty("keyAlias")) {
    def propertiesFile = file("../../keystores/androidkeystore.properties")
    Properties properties = readProperties(propertiesFile)

    System.out.println(">>> Signing Config " + properties)
    android.buildTypes.release.signingConfig.keyAlias = properties["key_alias"].toString()
    android.buildTypes.release.signingConfig.keyPassword = properties["key_password"].toString()
    android.buildTypes.release.signingConfig.storeFile = file(properties["store_filename"].toString())
    android.buildTypes.release.signingConfig.storePassword = properties["store_password"].toString()
}

// version -------------------------------------------------
updateVersion()

def updateVersion() {
    def propertiesFile = file("build.properties")
    Properties properties = readProperties(propertiesFile)

    def versionMajor = properties["version_major"].toString().toInteger()
    def versionMinor = properties["version_minor"].toString().toInteger()
    def versionPatch = properties["version_patch"].toString().toInteger()
    def versionBuild = properties["version_build"].toString().toInteger()
    def versionStore = properties["version_store"].toString().toInteger()

    if (isReleaseTask()) {
        System.out.println(">>> Building Release...")
        versionPatch++
        versionStore++
        versionBuild = 0
        properties["version_patch"] = versionPatch.toString()
        properties["version_store"] = versionStore.toString()
        properties["version_build"] = versionBuild.toString()
        writeProperties(propertiesFile, properties)
    }
    if (isCompileTask()) {
        System.out.println(">>> Compiling Source...")
        versionBuild++
        properties["version_build"] = versionBuild.toString()
        writeProperties(propertiesFile, properties)
    }

    def versionName = "${versionMajor}.${versionMinor}.${versionPatch}"
    def applicationId = android.defaultConfig.applicationId
    if (!isReleaseTask()) {
        versionName = versionName + ".${versionBuild}"
        applicationId = applicationId + android.buildTypes.debug.applicationIdSuffix
    }
    System.out.println(">>> " + project.parent.name + " " + versionName + " (" + versionStore + ") " + applicationId)
    android.defaultConfig.versionCode = versionStore
    android.defaultConfig.versionName = versionName
}

def isCompileTask() {
    def tasks = gradle.getStartParameter().getTaskNames()
    return ":app:generateDebugSources" in tasks || ":app:generateReleaseSources" in tasks ||
            "generateDebugSources" in tasks || "generateReleaseSources" in tasks
}

def isReleaseTask() {
    def tasks = gradle.getStartParameter().getTaskNames()
    return ":app:assembleRelease" in tasks || "assembleRelease" in tasks
}

static Properties readProperties(propertiesFile) {
    if (propertiesFile.canRead()) {
        Properties properties = new Properties()
        def inputStream = new FileInputStream(propertiesFile)
        properties.load(inputStream)
        inputStream.close()
        return properties
    } else {
        def message = ">>> Could not read " + propertiesFile.name + " file!"
        System.err.println(message)
        throw new GradleException(message)
    }
}

def static writeProperties(propertiesFile, properties) {
    def writer = propertiesFile.newWriter()
    properties.store(writer, "Build Properties")
    writer.close()
}
